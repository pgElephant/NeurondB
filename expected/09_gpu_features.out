-- Test GPU Features
-- This test suite validates GPU acceleration functionality
-- Tests will gracefully skip if GPU is not available
-- Create extension
CREATE EXTENSION IF NOT EXISTS neurondb;
NOTICE:  extension "neurondb" already exists, skipping
CREATE EXTENSION
-- Test 1: GPU info function
SELECT neurondb_gpu_info();
 neurondb_gpu_info 
-------------------
(0 rows)

-- Test 2: Try to enable GPU (will fallback to CPU if no GPU)
SELECT neurondb_gpu_enable(true);
WARNING:  neurondb: GPU enable requested but initialization failed
 neurondb_gpu_enable 
---------------------
 f
(1 row)

-- Test 3: GPU statistics
SELECT * FROM neurondb_gpu_stats();
 neurondb_gpu_stats 
--------------------
(0 rows)

-- Test 4: Create test data for GPU distance operations
CREATE TABLE gpu_test_vectors (
    id SERIAL PRIMARY KEY,
    vec vector(128)
);
CREATE TABLE
-- Insert test vectors
INSERT INTO gpu_test_vectors (vec)
SELECT ('[' || array_to_string(ARRAY(
    SELECT (random() * 2 - 1)::float4
    FROM generate_series(1, 128)
), ',') || ']')::vector
FROM generate_series(1, 100);
INSERT 0 100
-- Test 5: GPU L2 distance (will use CPU if GPU unavailable)
SELECT id, vector_l2_distance_gpu(vec, (SELECT vec FROM gpu_test_vectors WHERE id = 1))
FROM gpu_test_vectors
ORDER BY 2
LIMIT 5;
 id | vector_l2_distance_gpu 
----+------------------------
(0 rows)

-- Test 6: GPU cosine distance
SELECT id, vector_cosine_distance_gpu(vec, (SELECT vec FROM gpu_test_vectors WHERE id = 1))
FROM gpu_test_vectors
ORDER BY 2
LIMIT 5;
 id | vector_cosine_distance_gpu 
----+----------------------------
(0 rows)

-- Test 7: GPU inner product
SELECT id, vector_inner_product_gpu(vec, (SELECT vec FROM gpu_test_vectors WHERE id = 1))
FROM gpu_test_vectors
ORDER BY 2
LIMIT 5;
 id | vector_inner_product_gpu 
----+--------------------------
(0 rows)

-- Test 8: Compare GPU vs CPU distance (should be nearly identical)
SELECT 
    id,
    ABS(
        vector_l2_distance_gpu(vec, (SELECT vec FROM gpu_test_vectors WHERE id = 1)) -
        vector_l2_distance(vec, (SELECT vec FROM gpu_test_vectors WHERE id = 1))
    ) < 0.001 AS distances_match
FROM gpu_test_vectors
WHERE id <= 10;
 id | distances_match 
----+-----------------
(0 rows)

-- Test 9: GPU quantization INT8
SELECT vector_to_int8_gpu(vec) FROM gpu_test_vectors LIMIT 1;
 vector_to_int8_gpu 
--------------------
(0 rows)

-- Test 10: GPU quantization FP16
SELECT vector_to_fp16_gpu(vec) FROM gpu_test_vectors LIMIT 1;
 vector_to_fp16_gpu 
--------------------
(0 rows)

-- Test 11: GPU quantization binary
SELECT vector_to_binary_gpu(vec) FROM gpu_test_vectors LIMIT 1;
 vector_to_binary_gpu 
----------------------
(0 rows)

-- Test 12: GPU HNSW search (will use CPU path if GPU unavailable)
CREATE INDEX gpu_test_hnsw_idx ON gpu_test_vectors USING hnsw (vec vector_l2_ops);
ERROR:  access method "hnsw" does not exist
SELECT id FROM hnsw_knn_search_gpu(
    (SELECT vec FROM gpu_test_vectors WHERE id = 1),
    5,
    100
);
ERROR:  function hnsw_knn_search_gpu(vector, integer, integer) does not exist
LINE 1: SELECT id FROM hnsw_knn_search_gpu(
                       ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- Test 13: GPU IVF search
SELECT id FROM ivf_knn_search_gpu(
    (SELECT vec FROM gpu_test_vectors WHERE id = 1),
    5,
    10
);
ERROR:  function ivf_knn_search_gpu(vector, integer, integer) does not exist
LINE 1: SELECT id FROM ivf_knn_search_gpu(
                       ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- Test 14: GPU KMeans clustering (if GPU available)
SELECT cluster_kmeans_gpu('gpu_test_vectors', 'vec', 3, 10);
ERROR:  function cluster_kmeans_gpu(unknown, unknown, integer, integer) does not exist
LINE 1: SELECT cluster_kmeans_gpu('gpu_test_vectors', 'vec', 3, 10);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- Test 15: GPU statistics after operations
SELECT * FROM neurondb_gpu_stats();
 neurondb_gpu_stats 
--------------------
(0 rows)

-- Test 16: Reset GPU statistics
SELECT neurondb_gpu_stats_reset();
 neurondb_gpu_stats_reset 
--------------------------
 t
(1 row)

-- Test 17: Verify stats reset
SELECT * FROM neurondb_gpu_stats();
 neurondb_gpu_stats 
--------------------
(0 rows)

-- Test 18: Disable GPU
SELECT neurondb_gpu_enable(false);
NOTICE:  neurondb: GPU acceleration disabled
 neurondb_gpu_enable 
---------------------
 f
(1 row)

-- Test 19: GPU info after disable
SELECT neurondb_gpu_info();
 neurondb_gpu_info 
-------------------
(0 rows)

-- Cleanup
DROP TABLE gpu_test_vectors CASCADE;
DROP TABLE

